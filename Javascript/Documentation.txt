// Day 1 - Start

Chrome => Right Click and select inspect
		  Select Console Tab
		  Select undock into seperate window for full window

Variable
	Holds the values
	
// Syntax for Creating variable
var variableName = defaultValue;

var username = 'krishna';
var age = 25;
var isMale = true;

// Viewing the values inside variableName
1. Displaying in Alert Box => alert(username) => Displays user username in popup.
2. Print to Console => console.log(username) => prints username to console.

var city;
alert(city); => displays undefined in popup. ie defaultValue is undefined

Operators
= Assignment
== Equal => Compares values
=== Compares Both value and type
? Conditional
|| 

var a = 10;
var b = 20;

var c = a + b;
alert(c) => displays 30 in popup

var d = '40';
var e = c + d;
alert(e) => displays 3040 in popup => concatenation occurs as one of the value type is string.

Conditional Opertor
var variableName = condition ? value1 : value2;
if condition is true
	value1 is copied to variable
else 
	value2 is copied to variable
	
var z = 10 > 5 ? 10 : 20
As condition is satified, 10 is copied to z.

Or Operator => Handling Undefined
var a;
var b = a || 40;
alert(b) => displays 40 in popup

var l, m, n;
var z = l || m || n || 40;
alert(z) => displays 40 in popup

m = 20;
z = l || m || n || 40;
alert(z) => displays 20 in popup

Functions
	Block of code
	Uses => reusability, code reduction
// Syntax - Approach 1
var functionName = function(arguments){
	// block of code
	
	// return value if needed
}

var welcome = function(){
	console.log('Welcome to Demo');
}

// Executing the function
functionName(parameters);

var add = function(x, y){
	var z = x + y;
	return z;
}

add(10, 20) => returns 30

x and y are called arguments of function
10 and 20 are called parameters to function

var sub = function(x, y){
	console.log('x value is ' + x);
	console.log('y value is ' + y);
	var z = x - y;
	return z;
}

1 + undefined => NaN
1 - undefined => NaN
1 * undefined => NaN
1 / undefined => NaN

sub(10) => NaN not a number

// Handling undefined
var sub = function(x, y){
	x = x || 0;
	y = y || 0;
	console.log('x value is ' + x);
	console.log('y value is ' + y);
	var z = x - y;
	return z;
}

// Approach 2 for Creating function
function functionName(arguments) {
	
}

function mul(x, y){
	x = x || 1;
	y = y || 1;
	return x * y;
}

// Approach 3 for Creating function. Arrow Functions
var functionName = arguments => {}

var add = (x, y) => {
	return x + y;
}

var sub = (x, y) => x - y;


var welcome = user => {
	user = user || 'Guest'
	console.log('Welcome to Demo, ' + user);
}

var welcome = user => console.log('Welcome to Demo, ' + user);
welcome() => Prints Welcome to Demo, Guest

Helper Functions => functions that exists/supports in browser
typeOf => returns value type
parseInt => Converts string to number
parseFloat => Converts string to float

Types
	Number
	String
	Boolean
	Undefined

1 === parseInt("1") returns true

// Self Executing Functions 
	Function that executes itself.
	Adv: Memory allocated for function is cleared automatically once the function is executed
	
// Syntax
(function functionName(arguments){})(parameters);

(function welcome() {
	console.log('Welcome to Demo');
})();

(function addition(x, y){
	return x + y;
})(10, 20);

( (x, y) => x - y )(10, 20);

// Day 1 - End

// Day 2 - Start

Object
	Key Value Pair
	Key - String - Access using . and []
		  Numeric - Access using []
	Value - String
			Boolean
			Numeric
			Function
	
// Sample Object
var prakash = {
	name: 'Prakash Kumar',
	age: 25,
	isMale: true,
	city: 'Hyderabad'
}

// Accessing the values from Object
prakash.name
prakash['name']

console.log('Welcome to Demo, ' + prakash.name + ', ' + prakash.age + ', ' + prakash['city'])

// Key can be numeric
var obj = {
	1: 'a',
	2: 'b'
}

// can use _ symbol with in the string key
var neha = {
	first_name: 'Neha',
	last_name: 'Singh'
}

// Real Time Scenarios
1. using Object as input param

// with out object as input
function welcome(name, age, city){
	console.log(name + age + city);
}

// with object as input
function welcome2(options){
	console.log(options.name + options['age'] + options.city);
}

// Handling Undefined
function welcome3(options){
	options.name = options.name || '';
	options.age = options.age || '';
	options.city = options.city || '';
	console.log(options.name + options['age'] + options.city);
}

// Setting Default Values
function welcome4(options){
	options = options || {};
	options.name = options.name || 'Guest';
	options.age = options.age || '25';
	options.city = options.city || 'Hyderabad';
	console.log(options.name + options['age'] + options.city);
}

// 2. Use Case - Remove Collision of Methods

// Lib1
function add(x, y) {}

// Lib2
function add(x, y, z) {}

var Lib1 = {
	add: function(x, y){
		return x + y;
	}
}

var Lib2 = {
	add: function(x, y, z){
		return x + y + z;
	}
}

Lib1.add(10, 20)
Lib2.add(10, 20, 30)

var Calculator = {
	add: function(x, y){
		return x + y;
	},
	sub: function(x, y){
		return x - y;
	}
}
Calculator.mul = function(x, y){
	return x * y;
}
Calculator['div'] = function(x, y){
	return x / y;
}

var student = {
	name: 'Sundeep',
	age: 10,
	class: 5
}

var APIRequest = JSON.stringify(student);
var APIResponse = JSON.stringify(student);

var obj2 = JSON.parse(APIResponse);

JSON.stringify => converts object to string
JSON.parse => Converts string to object

var prakash = {
	name: 'Prakash Kumar',
	age: 20
}
prakash.city = 'Hyderabad';

// Deleting Key value pair
delete object.key
delete object['key']

prakash.address = {
	Line1: '1/2/3',
	Line2: 'Kukatpally'
}


// Day 2 - End

// Day 3 - Start

// Arrays
	Collection
	Its an Object where keys are numeric, starts with 0, increments by 1
	Usually we call key as Index

var array = [];

var numbers = [1, 2, 3, 4, 5];
var students = ['Deepthi', 'Venkat', 'Neetu'];

// Accessing values
students[0] returns Deepthi
students[1] returns Venkat
students[2] returns Neetu
students[3] returns undefined => that means it doesnt throws exception that item doesnt exist

students.push('Rakesh') => adds item at the end of array
students.pop() => removes last item

// Iterating Arrays
// Approach 1 - For
for(var index = 0; index < students.length; index ++){
	var student = students[index];
	console.log(student);
}

// Approach 2 - For In - Iterating by Index
for(var index in students){
	var student = students[index];
	console.log(student);
}

// Approach 3 - For Of - Iterating by item
for(var student of students){
	console.log(student);
}

var persons = [
	{ name: 'Venkat', age: 20, city: 'HYD' },
	{ name: 'Ramya', age: 20, city: 'HYD' },
	{ name: 'Rakesh', age: 22, city: 'Delhi' },
	{ name: 'Deepthi', age: 25, city: 'HYD' },
	{ name: 'Arjun', age: 28, city: 'Delhi' }
];

for(var person of persons) {
	console.log('Welcome to Demo, ' + person.name + ', ' + person.age + ', ' + person.city)
}

// print persons where age >= 25
for(var person of persons){
	if(person.age >= 25) {
		console.log('Welcome to Demo, ' + person.name + ', ' + person.age + ', ' + person.city);
	}
}

// print persons where age >= 25 and city is HYD
for(var person of persons){
	if(person.age >= 25 && person.city == 'HYD') {
		console.log('Welcome to Demo, ' + person.name + ', ' + person.age + ', ' + person.city);
	}
}

// print persons where age >= 25 or city is Delhi
for(var person of persons){
	if(person.age >= 25 || person.city == 'Delhi') {
		console.log('Welcome to Demo, ' + person.name + ', ' + person.age + ', ' + person.city);
	}
}

// Using Index in console.
for(var index in persons){
	var person = persons[index];
	if(person.age >= 25 || person.city == 'Delhi') {
		console.log('Welcome to Demo, ' + person.name + ' with Index '+ index + ', ' + person.age + ', ' + person.city);
	}
}

var neha = {
	name: 'Neha Singh',
	age: 30,
	address: [
		{ line1: '12/3/2', line2: 'Ameerpet'},
		{ line1: '12/3/2', line2: 'Kukatpally', line3: 'Flat 303'}
	]
}

neha.address[1].line2 prints Kukatpally

neha.address.push({ line1: 'Meerpet'})

// Printing keys of object in console
for(var key in neha){
	console.log(key);
}

var array = [ 'Krishna', 25, true, [1, 2, 3], function(x, y ){ return x + y;}]

array[0] prints Krishna
array[1] prints 25
array[2] prints true
array[3] prints [1, 2, 3]
array[3][0] prints 1
array[3][1] prints 2
array[3][2] prints 3
array[4] prints function
array[4](10, 20) returns 30

React.CreateButton('Login')

var React = {
	CreateButton: function(name){
		...
	}
}

Angular.Buttons.RadioButton.Create({ text: 'Login'})
Angular.Buttons.CircleButton.Create({ text: 'Login'})

var Angular = {
	Buttons: {
		RadioButton: {
			Create: function(options){
				
			}
		},
		CircleButton: {
			Create: function(options){
			}
		}
	}
}

// Day 3 - End

// Day 4 - Start

var calculator = {
	add: function(x, y){
		return x + y;
	},
	sub: function(x, y){
		return x - y;
	}
}

var prakash = {
	name: 'Prakash Kumar',
	age: 20,
	cc: 123456
}

var neha = {
	name: 'Neha Singh',
	age: 25,
	cc: 567890
}

// Oops -- Object Oriented Programming

Advantages - 
	Security
	Remove Duplicate Code 
	
OOPS Concepts
	Class - Structure - Animal, Car
	Object - Actual item - Lion, Alto
	Access Specifiers - Public, Private
	Constructors
	Inheritance - Accessing Parent Class Features

Class - Fields - Holds the values - name, age, city
		Methods - Holds the functions - add, sub

// Creating a class - Approach 1
// Syntax
var className = function(){
	// private variable/method
	return {
		// public Variable/Method
	}
}
// Creating Object
var instance = new className();


var Person = function(){
	return {
		name: '',
		age: '',
		cc: ''
	}
}
var prakash = new Person();
var neha = new Person();

// using Constructors
var Person2 = function(input_name, input_age, input_cc){
	return {
		name: input_name,
		age: input_age,
		cc: input_cc
	}
}
var prakash = new Person2('Prakash Kumar', 20, 123456)
var neha = new Person2('Neha Singh', 25, 567890)


// using Object as input
var Person3 = function(options){
	return {
		name: options.name,
		age: options.age,
		cc: options.cc
	}
}
var prakash = new Person3({ name: 'Prakash Kumar', age: 20, cc: 123456 })
var neha = new Person3({ name: 'Neha Singh', age: 25, cc: 567890})

// Handling Undefined
var Person4 = function(options){
	options = options || {};
	options.name = options.name || '';
	options.age = options.age || '';
	options.cc = options.cc || '';
	
	return {
		name: options.name,
		age: options.age,
		cc: options.cc
	}
}

// Setting Default Values
var Person5 = function(options){
	options = options || {};
	options.name = options.name || 'Guest';
	options.age = options.age || '0';
	options.cc = options.cc || 'xxxxx';
	
	return {
		name: options.name,
		age: options.age,
		cc: options.cc
	}
}

var Calculator = function(){
	return {
		add: function(x, y){
			return x + y;
		},
		sub: function(x, y){
			return x - y;
		}
	}
}

var c1 = new Calculator();
c1.add(10, 20)
c1.sub(10, 20);

var c2 = new GST();

c2.calculateAmount({ revenue: 1000, profit: 200 })
c2.displayNetProfit();

var GST = function(){
	return {
		calculateAmount: function(options) {},
		displayNetProfit: function()
	}
}

// Security
var nilesh = {
	name: 'Nilesh Reddy',
	cc: 123456
}

var Student = function(options){
	var cc = options.cc;
	var print = function(result) {
		console.log(result);
	}
	
	return {
		name: options.name,
		printCC: function(){
			print(cc.toString().replace('123', 'xxx'));
		}
	}
}

Similar Terms
field, variable, member, property, attribute
function, method, api, Interfaces

Naming Conventions
Camel Case => 
	first letter will be in lower case, for every word joining higher case letter is used
	var helloWorld, scientificCalculator 
	Scenarios - creating functions
Variable Case => 
    first letter will be in upper case, for every word joining higher case letter is used
	Student, Person
	Scenarios - creating class
Higher Case =>
	all letters will be in higher case
	STATES, COUNTRIES 
	Scenarios - creating constants or static data
LOWER Case =>
	all letters will be in lower case
	Scenarios - creating variables
	student, person
	
// Day 4













