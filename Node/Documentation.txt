Download link - https://nodejs.org/en/download/

Node - Server Side Javascript Framework
	 - Small Container. All Modules are connected in tree format.

Node + Express => Backend
Node + Http/Webpack => FrontEnd

Node - npm - node package manager - 
	npm - adding/updating/deleting modules
	
	
React with Node => Using Node as a platform, we are building React Application.


React Website => React - 100, React DOM - 100, Babel - 100

300 functions - 3 mb
10 functions - 100 kb


Advantages of Adding Node in UI Frameworks:
	1. Download only required functions
	2. Compress those functions - 100 kb converts to 5 kb
	3. Merging all files into single file
	4. Cache is applied - main.1234.js, main.1234.css.. images
	5. Easier Deployments
	6. Image Compression
	7. Copies only required resources
	
	
Creating a project
	Create Folder 
	npm init
	create any file - name it as app.js or server.js
	Executing - node filename.js 
	
npm 
	add => npm install moduleName
		   npm install moduleName@version

	
var express = function() {
	return {
		get: function(route, callBack) {
			
		},
		post: function() {
		}
	}
}

module.exports = express;
	
	
Express JS
	https://expressjs.com/
	https://www.tutorialspoint.com/expressjs/
	
Sample
	https://expressjs.com/en/starter/installing.html
	https://expressjs.com/en/starter/hello-world.html
	
	
// install A
	A 
		B  		C
		 D E F   G
	      H

npm install A => H D E F B G C

A - Calculator
B - Calculator

A B C

Project Structure

	public - html
	src - index.js, app.js
		components - reusable
		containers/views/screens - Pages
		assets 
			images
			fonts
			
https://yarnpkg.com/lang/en/docs/install/#windows-stable

npm install react-router-dom --save
yarn add react-router-dom
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

	
	
	
	
	
	
	
	
